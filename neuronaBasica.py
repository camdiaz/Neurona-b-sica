# -*- coding: utf-8 -*-
"""Copia de 1er ejemplo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SXnAh72mK2XHSYgj4IQE9cqC9etsGnlG
"""

#LIBRERÍA PARA INCORPORAR IA Y CONSTRUIR LAS NEURONAS
import tensorflow as tf
#Librería para realizar cálculos lógicos y matemáticos sobre cuadros y matrices
import numpy as np

from numpy.core.multiarray import dtype
celsius = np.array([ -40, -10, 0, 8, 15, 22, 38 ], dtype = float) #entradas
fahrenheit = np.array([ -40, 14, 32, 46, 59, 72, 100], dtype = float) #posibles salidas

# Se inicializa la variable e incluimos keras donde paramnetrizamos la red a traves de comandos
# Se utilizan capas densas donde cada neurona de la 1era cap se conecta con cada neurona de la 2da capa
# Estructura de la red neuronal a optimizar

#capa = tf.keras.layers.Dense(units=1, input_shape=[1]) #Se define estructura de la neurona, aqui se definen las capas donde units es salida e input_shape es entrada
# Se guarda el modelo, teniendo en cuenta que tf.keras se aplica dentro de capa
#modelo = tf.keras.Sequential([capa])

oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1,oculta2, salida])

# modelo a partir del metodo Adam para ejecutar nuestra neurona y que la respuesta esperada a traves de los pesos sea muy proxima
# 0,1 indica el salto de pendiente de error para confirmar los errores o proximidad a la respuesta
modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),
    # Es mejor tener pocos errores pequeños a pocos errores grandes
    loss = 'mean_squared_error'
)

# Se entrena a la red neuronal
# fit es el comando esencial para hacer el entreno de la red
print("comenzando entrenamiento... ")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose= False)
print("modelo terminado ")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])

print("Hagamos la predicción: ")
resultado = modelo.predict([100.0])
print("el resultado es " + str(resultado) + "fahrenheit.")

print("Variables internas del modelo")
#entrega la estructura neuronal con sus pesos y bayas (entrega el modelo adecuado)
#print(capa.get_weights())
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())